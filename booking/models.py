from django.db import models

team_choices = (
    ('red_bull', 'Red Bull'),
    ('ferrari', 'Ferrari'),
    ('mercedes', 'Mercedes'),
    ('alpine', 'Alpine'),
    ('mclaren', 'McLaren'),
    ('alfa_romeo', 'Alfa Romeo'),
    ('aston_martin', 'Aston Martin'),
    ('haas', 'Haas'),
    ('alphatauri', 'AlphaTauri'),
    ('williams', 'Williams'),
    )

country_choices = (
    ('abw', 'Aruba'),
    ('afg', 'Afghanistan'),
    ('ago', 'Angola'),
    ('aia', 'Anguilla'),
    ('ala', 'Åland Islands'),
    ('alb', 'Albania'),
    ('and', 'Andorra'),
    ('are', 'United Arab Emirates'),
    ('arg', 'Argentina'),
    ('arm', 'Armenia'),
    ('asm', 'American Samoa'),
    ('ata', 'Antarctica'),
    ('atf', 'French Southern Territories'),
    ('atg', 'Antigua and Barbuda'),
    ('aus', 'Australia'),
    ('aut', 'Austria'),
    ('aze', 'Azerbaijan'),
    ('bdi', 'Burundi'),
    ('bel', 'Belgium'),
    ('ben', 'Benin'),
    ('bes', 'Bonaire, Sint Eustatius and Saba'),
    ('bfa', 'Burkina Faso'),
    ('bgd', 'Bangladesh'),
    ('bgr', 'Bulgaria'),
    ('bhr', 'Bahrain'),
    ('bhs', 'Bahamas'),
    ('bih', 'Bosnia and Herzegovina'),
    ('blm', 'Saint Barthélemy'),
    ('blr', 'Belarus'),
    ('blz', 'Belize'),
    ('bmu', 'Bermuda'),
    ('bol', 'Bolivia'),
    ('bra', 'Brasil'),
    ('brb', 'Barbados'),
    ('brn', 'Brunei Darussalam'),
    ('btn', 'Bhutan'),
    ('bvt', 'Bouvet Island'),
    ('bwa', 'Botswana'),
    ('caf', 'Central African Republic'),
    ('can', 'Canada'),
    ('cat', 'Catalonia (autonomous community in Spain)'),
    ('cck', 'Cocos (Keeling) Islands'),
    ('che', 'Switzerland'),
    ('chl', 'Chile'),
    ('chn', 'China (People\'s Republic of China)'),
    ('civ', 'Côte d\'Ivoire'),
    ('cmr', 'Cameroon'),
    ('cod', 'Congo (Democratic Republic of the Congo)'),
    ('cog', 'Congo (Congo-Brazzaville)'),
    ('cok', 'Cook Islands'),
    ('col', 'Colombia'),
    ('com', 'Comoros'),
    ('cpv', 'Cabo Verde'),
    ('cri', 'Costa Rica'),
    ('cub', 'Cuba'),
    ('cuw', 'Curaçao'),
    ('cxr', 'Christmas Island'),
    ('cym', 'Cayman Islands'),
    ('cyp', 'Cyprus'),
    ('cze', 'Czech Republic'),
    ('deu', 'Germany'),
    ('dji', 'Djibouti'),
    ('dma', 'Dominica'),
    ('dnk', 'Denmark'),
    ('dom', 'Dominican Republic'),
    ('dza', 'Algeria'),
    ('ecu', 'Ecuador'),
    ('egy', 'Egypt'),
    ('eng', 'England'),
    ('eri', 'Eritrea'),
    ('esh', 'Western Sahara'),
    ('esp', 'Spain'),
    ('est', 'Estonia'),
    ('eth', 'Ethiopia'),
    ('eun', 'European Union'),
    ('fin', 'Finland'),
    ('fji', 'Fiji'),
    ('flk', 'Falkland Islands (Malvinas)'),
    ('fra', 'France'),
    ('fro', 'Faroe Islands'),
    ('fsm', 'Micronesia'),
    ('gab', 'Gabon'),
    ('gbr', 'United Kingdom'),
    ('geo', 'Georgia'),
    ('ggy', 'Guernsey'),
    ('gha', 'Ghana'),
    ('gib', 'Gibraltar'),
    ('gin', 'Guinea'),
    ('glp', 'Guadeloupe'),
    ('gmb', 'Gambia'),
    ('gnb', 'Guinea-Bissau'),
    ('gnq', 'Equatorial Guinea'),
    ('grc', 'Greece'),
    ('grd', 'Grenada'),
    ('grl', 'Greenland'),
    ('gtm', 'Guatemala'),
    ('guf', 'French Guiana'),
    ('gum', 'Guam'),
    ('guy', 'Guyana'),
    ('hkg', 'Hong Kong (Special Administrative Region of the China)'),
    ('hmd', 'Heard Island and McDonald Islands'),
    ('hnd', 'Honduras'),
    ('hrv', 'Croatia'),
    ('hti', 'Haiti'),
    ('hun', 'Hungary'),
    ('idn', 'Indonesia'),
    ('imn', 'Isle of Man'),
    ('ind', 'India'),
    ('iot', 'British Indian Ocean Territory'),
    ('irl', 'Ireland'),
    ('irn', 'Iran'),
    ('irq', 'Iraq'),
    ('isl', 'Iceland'),
    ('isr', 'Israel'),
    ('ita', 'Italy'),
    ('jam', 'Jamaica'),
    ('jey', 'Jersey'),
    ('jor', 'Jordan'),
    ('jpn', 'Japan'),
    ('kaz', 'Kazakstan'),
    ('ken', 'Kenya'),
    ('kgz', 'Kyrgyzstan'),
    ('khm', 'Cambodia'),
    ('kir', 'Kiribati'),
    ('kna', 'Saint Kitts and Nevis'),
    ('kor', 'Korea (Republic of Korea)'),
    ('kos', 'Kosovo (partially recognised state of Serbia)'),
    ('kwt', 'Kuwait'),
    ('lao', 'Lao People\'s Democratic Republic'),
    ('lbn', 'Lebanon'),
    ('lbr', 'Liberia'),
    ('lby', 'Libya'),
    ('lca', 'Saint Lucia'),
    ('lie', 'Liechtenstein'),
    ('lka', 'Sri Lanka'),
    ('lso', 'Lesotho'),
    ('ltu', 'Lithuania'),
    ('lux', 'Luxembourg'),
    ('lva', 'Latvia'),
    ('mac', 'Macau (Macao Special Administrative Region of China)'),
    ('maf', 'Saint Martin (French part)'),
    ('mar', 'Marokko'),
    ('mco', 'Monaco'),
    ('mda', 'Moldova'),
    ('mdg', 'Madagascar'),
    ('mdv', 'Maldives'),
    ('mex', 'Mexico'),
    ('mhl', 'Marshall Islands'),
    ('mkd', 'Makedonia'),
    ('mli', 'Mali'),
    ('mlt', 'Malta'),
    ('mmr', 'Myanmar'),
    ('mne', 'Montenegro'),
    ('mng', 'Mongolia'),
    ('mnp', 'Northern Mariana Islands'),
    ('moz', 'Mozambique'),
    ('mrt', 'auritania'),
    ('msr', 'Montserrat'),
    ('mtq', 'Martinique'),
    ('mus', 'Mauritius'),
    ('mwi', 'Malawi'),
    ('mys', 'Malaysia'),
    ('myt', 'Mayotte'),
    ('nam', 'Namibia'),
    ('ncl', 'New Caledonia'),
    ('ner', 'Niger'),
    ('nfk', 'Norfolk Island'),
    ('nga', 'Nigeria'),
    ('nic', 'Nicaragua'),
    ('nir', 'Northern Ireland'),
    ('niu', 'Niue'),
    ('nld', 'Netherlands'),
    ('nor', 'Norway'),
    ('npl', 'Nepal'),
    ('nru', 'Nauru'),
    ('nzl', 'New Zealand'),
    ('omn', 'Oman'),
    ('pak', 'Pakistan'),
    ('pan', 'Panama'),
    ('pcn', 'Pitcairn'),
    ('per', 'Peru'),
    ('phl', 'Phillipines'),
    ('plw', 'Palau'),
    ('png', 'Papua New Guinea'),
    ('pol', 'Poland'),
    ('pri', 'Puerto Rico'),
    ('prk', 'Korea (Democratic People\'s Republic of Korea)'),
    ('prt', 'Portugal'),
    ('pry', 'Paraguay'),
    ('pse', 'State of Palestine'),
    ('pyf', 'French Polynesia'),
    ('qat', 'Qatar'),
    ('reu', 'Réunion'),
    ('rou', 'Roumania'),
    ('rus', 'Russia'),
    ('rwa', 'Rwanda'),
    ('sau', 'Saudi Arabia'),
    ('sco', 'Scotland'),
    ('sdn', 'Sudan'),
    ('sen', 'Senegal'),
    ('sgp', 'Singapore'),
    ('sgs', 'South Georgia and the South Sandwich Islands'),
    ('shn', 'Saint Helena, Ascension and Tristan da Cunha'),
    ('sjm', 'Svalbard and Jan Mayen'),
    ('slb', 'Solomon Islands'),
    ('sle', 'Sierra Leone'),
    ('slv', 'El Salvador'),
    ('smr', 'San Marino'),
    ('som', 'Somalia'),
    ('spm', 'Saint Pierre and Miquelon'),
    ('srb', 'Serbia'),
    ('ssd', 'South Sudan'),
    ('stp', 'Sao Tome and Principe'),
    ('sun', 'Union of Soviet Socialist Republics (USSR)'),
    ('sur', 'Suriname'),
    ('svk', 'Slovakia'),
    ('svn', 'Slovenia'),
    ('swe', 'Sweden'),
    ('swz', 'Swaziland'),
    ('sxm', 'Sint Maarten (Dutch part)'),
    ('syc', 'Seychelles'),
    ('syr', 'Syrian Arab Republic'),
    ('tca', 'Turks and Caicos Islands'),
    ('tcd', 'Chad'),
    ('tgo', 'Togo'),
    ('tha', 'Thailand'),
    ('tjk', 'Tajikistan'),
    ('tkl', 'Tokelau'),
    ('tkm', 'Turkmenistan'),
    ('tls', 'Timor-Leste'),
    ('ton', 'Tonga'),
    ('tto', 'Trinidad and Tobago'),
    ('tun', 'Tunisia'),
    ('tur', 'Turkey'),
    ('tuv', 'Tuvalu'),
    ('twn', 'Taiwan'),
    ('tza', 'United Republic of Tanzania'),
    ('uga', 'Uganda'),
    ('ukr', 'Ukraine'),
    ('umi', 'United States Minor Outlying Islands'),
    ('ury', 'Uruguay'),
    ('usa', 'United States of America'),
    ('uzb', 'Uzbekistan'),
    ('vat', 'Vanuatu'),
    ('vct', 'Vatican'),
    ('ven', 'Venezuela'),
    ('vgb', 'Virgin Islands (British)'),
    ('vir', 'Virgin Islands (U.S.)'),
    ('vnm', 'Vietnam'),
    ('vut', 'Vanuatu'),
    ('wal', 'Wales'),
    ('wlf', 'Wallis and Futuna'),
    ('wsm', 'Samoa'),
    ('yem', 'Yemen'),
    ('zaf', 'South Africa'),
    ('zmb', 'Zambia'),
    ('zwe', 'Zimbabwe')
)

for_self_choices = (
    (True, 'Yes'),
    (False, 'No')
)

stand_choices = (
    ("A", "A"),
    ("B", "B"),
    ("C", "C"),
    ("D", "D"),
)

seat_choices = (
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6),
    (7, 7),
    (8, 8),
    (9, 9),
    (10, 10),
    (11, 11),
    (12, 12),
    (13, 13),
    (14, 14),
    (15, 15),
    (16, 16),
    (17, 17),
    (18, 18),
    (19, 19),
    (20, 20),
    (21, 21),
    (22, 22),
    (23, 23),
    (24, 24),
    (25, 25),
    (26, 26),
    (27, 27),
    (28, 28),
    (29, 29),
    (30, 30),
    (31, 31),
    (32, 32),
    (33, 33),
    (34, 34),
    (35, 35),
    (36, 36),
    (37, 37),
    (38, 38),
    (39, 39),
    (40, 40),
    (41, 41),
    (42, 42),
    (43, 43),
    (44, 44),
    (45, 45),
    (46, 46),
    (47, 47),
    (48, 48),
    (49, 49),
    (50, 50),
    (51, 51),
    (52, 52),
    (53, 53),
    (54, 54),
    (55, 55),
    (56, 56),
    (57, 57),
    (58, 58),
    (59, 59),
    (60, 60),
    (61, 61),
    (62, 62),
    (63, 63),
    (64, 64),
    (65, 65),
    (66, 66),
    (67, 67),
    (68, 68),
    (69, 69),
    (70, 70),
    (71, 71),
    (72, 72),
    (73, 73),
    (74, 74),
    (75, 75),
    (76, 76),
    (77, 77),
    (78, 78),
    (79, 79),
    (80, 80),
    (81, 81),
    (82, 82),
    (83, 83),
    (84, 84),
    (85, 85),
    (86, 86),
    (87, 87),
    (88, 88),
    (89, 89),
    (90, 90),
    (91, 91),
    (92, 92),
    (93, 93),
    (94, 94),
    (95, 95),
    (96, 96),
    (97, 97),
    (98, 98),
    (99, 99),
    (100, 100)
)

# Create your models here.
class WebsiteUser(models.Model):
    '''
    WebsiteUser Information Model with the following fields:
    
    username - Unique username that user has chosen as login.
    first_name - First name of user.
    last_name - Last name of user.
    email - User's email that they didn't use to login.
    fave_team - User's favourite current Formula 1 team.
    nationality - User's mationality that they identify as.
    '''
    username = models.CharField(max_length=50, unique=True)
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    email = models.EmailField(max_length=250, default="")
    fave_team = models.CharField(max_length=250, choices=team_choices,
                                 default='alfa_romeo')
    nationality = models.CharField(max_length=250, choices=country_choices,
                                   default='irl')


    def __str__(self):
        # return users full name as easier to read
        return f'{self.first_name} {self.last_name}'


class Ticket(models.Model):
    '''
    Tickets Booked Model with the following fields:
    
    for_self - Boolean value if ticket is for the user or a non-user.
    booked_by - Connection to the current user's WebsiteUser object.
    first_name - First name of user.
    last_name - Last name of user.
    booked_on - DateTime of when the form was booked for easier organisation.
    nickname - A nickname that the user may have for the shared ticket.
    fave_team - User's favourite current Formula 1 team.
    nationality - User's mationality that they identify as.
    seat_number - The seat number in which the user will sit.
    stand - The stand letter in which the user will be sitting in.
    show - Boolean value if the user wants to share their attendance in the
           Tickets Sold page.
    '''
    for_self = models.BooleanField(default=False, choices=for_self_choices)
    booked_by = models.ForeignKey(WebsiteUser, on_delete=models.CASCADE)
    first_name = models.CharField(max_length=250)
    last_name = models.CharField(max_length=250)
    booked_on = models.DateTimeField(auto_now_add=True)
    nickname = models.CharField(max_length=250)
    fave_team = models.CharField(max_length=250, choices=team_choices,
                                 default='alfa_romeo')
    nationality = models.CharField(max_length=250, choices=country_choices,
                                   default='irl')
    seat_number = models.IntegerField(choices=seat_choices)
    stand = models.CharField(max_length=1, choices=stand_choices, default='D')
    show = models.BooleanField(default=True, choices=for_self_choices)


    def __str__(self):
        # return ticket details as easier to read
        return f'Ticket for {self.nickname} booked by {self.booked_by}'

